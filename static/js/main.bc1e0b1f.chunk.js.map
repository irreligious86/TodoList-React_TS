{"version":3,"sources":["components/Todolist/todolist.module.css","App.module.css","components/Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Todolist","props","className","classes","title","tasks","map","task","key","id","type","checked","isDone","onClick","removeTask","changeFilter","App","useState","setTasks","filter","setFilter","tasksForRender","t","taskID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,gBAAgB,gCAAgC,iBAAiB,iCAAiC,eAAe,+BAA+B,cAAc,8BAA8B,gBAAgB,gCAAgC,IAAM,sBAAsB,aAAa,+B,mBCAvSD,EAAOC,QAAU,CAAC,IAAM,mB,8KCUjB,SAASC,EAASC,GAiBrB,OACI,oCACI,wBAAIC,UAAWC,IAAQ,mBAAoBF,EAAMG,OACjD,yBAAKF,UAAWC,IAAQ,kBACpB,2BACAD,UAAWC,IAAQ,kBAEnB,sCAEJ,wBAAID,UAAWC,IAAQ,gBAClBF,EAAMI,MAAMC,KAzBQ,SAACC,GAC9B,OACI,wBAAIL,UAAWC,IAAQ,iBACnBK,IAAKD,EAAKE,IACV,2BAAOC,KAAK,WAAWC,QAASJ,EAAKK,SACrC,8BAAOL,EAAKH,OACZ,4BACIF,UAAWC,IAAQ,cACnBU,QAAU,kBAAMZ,EAAMa,WAAWP,EAAKE,MAF1C,UAqBJ,6BACI,4BACIP,UAAWC,IAAO,IAClBU,QAAU,kBAAIZ,EAAMc,aACvB,SAHD,OAKA,4BACIb,UAAWC,IAAO,IAClBU,QAAU,kBAAIZ,EAAMc,aACvB,YAHD,UAKA,4BACIb,UAAWC,IAAO,IAClBU,QAAU,kBAAIZ,EAAMc,aACvB,eAHD,eCODC,MA5Cf,WAEI,IAOA,EAAuBC,mBAPc,CACjC,CAACR,GAAI,EAAGL,MAAO,OAAQQ,QAAQ,GAC/B,CAACH,GAAI,EAAGL,MAAO,KAAMQ,QAAQ,GAC7B,CAACH,GAAI,EAAGL,MAAO,WAAYQ,QAAQ,GACnC,CAACH,GAAI,EAAGL,MAAO,aAAcQ,QAAQ,KAGzC,mBAAIP,EAAJ,KAAWa,EAAX,KACA,EAA0BD,mBAA2B,OAArD,mBAAKE,EAAL,KAAaC,EAAb,KAYIC,EAAiBhB,EAUrB,MARgB,WAAXc,IACDE,EAAiBhB,EAAMc,QAAO,SAAAG,GAAC,OAAiB,IAAbA,EAAEV,WAGzB,cAAXO,IACDE,EAAiBhB,EAAMc,QAAO,SAAAG,GAAC,OAAiB,IAAbA,EAAEV,WAIrC,yBAAKV,UAAWC,IAAO,KACnB,kBAACH,EAAD,CACII,MAAM,gBACNC,MAAOgB,EACPP,WAxBO,SAACS,GAChBL,EAASb,EAAMc,QAAO,SAAAG,GAAC,OAAIA,EAAEb,KAAOc,OAwB5BR,aApBS,SAACI,GAClBC,EAAUD,QCrBEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc1e0b1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist-body\":\"todolist_todolist-body__22SLH\",\"todolist-title\":\"todolist_todolist-title__1M5cg\",\"search-input\":\"todolist_search-input__2oyXm\",\"todolist-ul\":\"todolist_todolist-ul__3ipYQ\",\"todolist-item\":\"todolist_todolist-item__15LKl\",\"btn\":\"todolist_btn__2ZJkE\",\"btn-remove\":\"todolist_btn-remove__2LIph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Ls08w\"};","import React from \"react\";\r\nimport {FilterValuesType, TaskType} from \"../../App\";\r\nimport classes from \"./todolist.module.css\";\r\n\r\ntype TodolistPropsType = {\r\n    title: string,\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: number) => void\r\n    changeFilter: (filter: FilterValuesType) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const mapTaskObjectToListItem =  (task: TaskType)  => {\r\n        return (\r\n            <li className={classes['todolist-item']}\r\n                key={task.id}>\r\n                <input type=\"checkbox\" checked={task.isDone}/>\r\n                <span>{task.title}</span>\r\n                <button\r\n                    className={classes['btn-remove']}\r\n                    onClick={ () => props.removeTask(task.id) }\r\n                >x</button>\r\n            </li>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className={classes['todolist-title']}>{props.title}</h3>\r\n            <div className={classes['todolist-body']}>\r\n                <input\r\n                className={classes['search-input']}\r\n                />\r\n                <button>+</button>\r\n            </div>\r\n            <ul className={classes['todolist-ul']}>\r\n                {props.tasks.map( mapTaskObjectToListItem )}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={classes['btn']}\r\n                    onClick={ ()=>props.changeFilter\r\n                (\"all\")}\r\n                >All</button>\r\n                <button\r\n                    className={classes['btn']}\r\n                    onClick={ ()=>props.changeFilter\r\n                (\"active\")}\r\n                >Active</button>\r\n                <button\r\n                    className={classes['btn']}\r\n                    onClick={ ()=>props.changeFilter\r\n                (\"completed\")}\r\n                >Completed</button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport classes from  './App.module.css';\r\nimport {Todolist} from \"./components/Todolist/Todolist\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: number,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nfunction App() {\r\n\r\n    let tasksForState: Array<TaskType> = [\r\n        {id: 1, title: \"HTML\", isDone: true},\r\n        {id: 2, title: \"JS\", isDone: true},\r\n        {id: 3, title: \"React.JS\", isDone: false},\r\n        {id: 4, title: \"TypeScript\", isDone: false}\r\n    ]\r\n\r\n    let[tasks, setTasks] = useState<Array<TaskType>>(tasksForState)\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\")\r\n\r\n\r\n    const removeTask = (taskID: number) => {\r\n        setTasks(tasks.filter(t => t.id !== taskID))\r\n        // tasks = tasks.filter(t => t.id !== taskID)\r\n    }\r\n\r\n    const changeFilter = (filter: FilterValuesType) => {\r\n        setFilter(filter)\r\n    }\r\n\r\n    let tasksForRender = tasks\r\n\r\n    if ( filter === \"active\" ) {\r\n        tasksForRender = tasks.filter(t => t.isDone === false)\r\n    }\r\n\r\n    if ( filter === \"completed\" ) {\r\n        tasksForRender = tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes['App']}>\r\n            <Todolist\r\n                title=\"What to learn\"\r\n                tasks={tasksForRender}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App ;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}